FESXZ5	Leading Eurozone blue chips
FDAXZ5	German blue chip index
FDXMZ5	Smaller DAX futures
FGBLZ5	10-year German bond
FGBMZ5	5-year German bond
FGBSZ5	2-year German bond
FGBXZ5	30-year German bond
FSTXZ5	Pan-European blue chips
FSTBZ5	Eurozone bank sector
FSTIZ5	Eurozone insurance sector
FVSZ5	Eurozone volatility index
CCOZ25	Commodity index
XLINZ25	Industrial metals subindex
XLPRZ25	Precious metals subindex
XLXBZ25	Ex-agriculture/livestock index


configurations.all {
    resolutionStrategy {
        force 'jline:jline:0.9.93'
    }
}

./gradlew dependencies --configuration compileClasspath

repositories {
    maven {
        url "https://your-artifactory-url/artifactory/libs-release"
        metadataSources {
            artifact() // Use artifact-only if no POM is found
            mavenPom() // Still try to use POM if available
        }
    }
}


./gradlew test --tests "com.citi.connectivity.datamodel.TestTrade" \
  --no-daemon \
  -Dorg.gradle.jvmargs="--add-opens java.base/java.lang=ALL-UNNAMED"


test {
    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED'
}

def libsDirectory = file("$projectDir/libs") 

org.gradle.jvmargs=--add-opens java.base/org.mockito.internal.util=ALL-UNNAMED

awk -F'#' '{
  nanos = $3;
  total_sec = nanos / 1000000000;
  minutes = int(total_sec / 60);
  seconds = total_sec % 60;
  printf "%s#%s#%s (%.0f ns => %d min %.3f sec)#%s\n", $1, $2, nanos, nanos, minutes, seconds, $4;
}' input_file


java --patch-module jdk.unsupported=path/to/compat-sun-misc.jar \
     -cp build/libs/your-app.jar \
     your.main.ClassName



jdeps --module-path $JAVA_HOME/jmods --package sun.misc

jdeps --module-path $JAVA_HOME/jmods --recursive \
  --include sun.misc.BASE64Decoder \
  $JAVA_HOME/jmods/jdk.unsupported.jmod


jdeps --module-path $JAVA_HOME/jmods --list-deps --print-module-deps -q \
  --multi-release 11 \
  --class-path your.jar \
  your.class


javap --module jdk.unsupported sun.misc.BASE64Decoder

jdeps --module-path $JAVA_HOME/jmods --list-deps $JAVA_HOME/lib/modules


cd $JAVA_HOME/jmods
jmod extract --dir /tmp/jdk.unsupported jdk.unsupported.jmod
find /tmp/jdk.unsupported -name '*BASE64Encoder*'

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
        '--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED'
    ]
}
run {
    jvmArgs += ['--add-exports', 'jdk.unsupported/sun.misc=ALL-UNNAMED']
}

org.gradle.jvmargs=--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED
javac --add-exports jdk.unsupported/sun.misc=ALL-UNNAMED YourClass.java
java --add-exports jdk.unsupported/sun.misc=ALL-UNNAMED YourClass

javac -cp "path/to/streamlink-java.jar" StreamLinkExample.java

import com.caplin.streamlink.StreamLink;
import com.caplin.streamlink.StreamLinkFactory;
import com.caplin.streamlink.Subscription;
import com.caplin.streamlink.SubscriptionListener;
import com.caplin.streamlink.SubscriptionEvent;

public class StreamLinkExample {
    public static void main(String[] args) {
        try {
            // Initialize StreamLink with server details
            StreamLink streamLink = StreamLinkFactory.createStreamLink("liberator1", 18080);

            // Define the subject to subscribe to
            String subject = "/EXAMPLE/subject";

            // Create a subscription listener to handle incoming data
            SubscriptionListener listener = new SubscriptionListener() {
                @Override
                public void onSubscriptionEvent(SubscriptionEvent event) {
                    System.out.println("Received update: " + event.getRecord());
                }

                @Override
                public void onSubscriptionStatus(Subscription subscription, int status) {
                    System.out.println("Subscription status: " + status);
                }
            };

            // Create and activate the subscription
            Subscription subscription = streamLink.createSubscription(subject, listener);
            subscription.activate();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

