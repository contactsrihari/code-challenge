jstack <pid> > threadDump_$(date +%Y%m%d%H%M%S).txt

async function processItem(item) {
    console.log(`Processing: ${item}`);
    // Simulate an async operation (like an API call)
    await new Promise(resolve => setTimeout(resolve, 1000));
}

async function runWithPause(items) {
    for (let item of items) {
        await processItem(item);
        let proceed = confirm("Continue to the next item?");
        if (!proceed) {
            console.log("Stopped by user.");
            break;
        }
    }
}

let items = ["Item1", "Item2", "Item3"];
runWithPause(items);


----------

fetch('https://www.example.com')
   .then(response => response.text())
   .then(data => {
       // Manipulate DOM with the loaded content
       document.body.innerHTML = data;
       // Continue executing your script actions
       console.log("Page loaded and script continues executing!");
   })
   .catch(error => {
       console.error('Error loading page:', error);
   });
