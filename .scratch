netsh winhttp show proxy

FiddlerApplication.oProxy.UpstreamGateway = new Proxy("http=euwebproxy.wlb.eur.nsroot.net:80");
FiddlerApplication.oProxy.UpstreamGateway.Credentials = new System.Net.NetworkCredential("sk38994", "xxx", "");  // Or add domain if needed

if (oSession.oRequest.headers.ExistsAndContains("Proxy-Authorization", ""))
{
    // Already authorized
    return;
}
oSession["X-OverrideGateway"] = "http://yourproxy:port";
oSession["X-ProxyUser"] = "DOMAIN\\username";
oSession["X-ProxyPassword"] = "password";


String query = "[key.tck == #tck && key.market == #market && key.marketSectorDescription == #marketSector]";
Map<String, Object> variables = new HashMap<>();
variables.put("tck", tck);
variables.put("market", market);
variables.put("marketSector", marketSector);

Map multiplierEntry = parser.parseExpression(query).getValue(context, Map.class, variables);
-------

import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.expression.spel.support.StandardEvaluationContext;

public class SafeSpELExample {
    public static void main(String[] args) {
        // Input variables
        String tck = "someTckValue";
        String market = "someMarketValue";
        String marketSector = "someMarketSectorValue";

        // Create a parser
        ExpressionParser parser = new SpelExpressionParser();

        // Create a context and set variables
        StandardEvaluationContext context = new StandardEvaluationContext();
        context.setVariable("tck", tck);
        context.setVariable("market", market);
        context.setVariable("marketSector", marketSector);

        // Define the SpEL expression with placeholders
        String query = "[key.tck == #tck && key.market == #market && key.marketSectorDescription == #marketSector]";

        // Parse and evaluate the expression
        Expression expression = parser.parseExpression(query);
        Map<?, ?> multiplierEntry = expression.getValue(context, Map.class);

        // Use the result
        System.out.println(multiplierEntry);
    }
}
------

function_wrapper() {
    local default_arg="$1"  # Default argument from alias
    shift  # Remove the first argument (default value)
    local arg="${1:-$default_arg}"  # Override if a new argument is provided
    echo "checking which argument taken - $arg"
}

alias pricegrid1='function_wrapper "not special"'
alias pricegrid2='function_wrapper "not too special"'

---
pricegrid1                # Output: checking which argument taken - not special
pricegrid1 "very special"  # Output: checking which argument taken - very special

pricegrid2                # Output: checking which argument taken - not too special
pricegrid2 "super special"  # Output: checking which argument taken - super special


-agentpath:/home/user/yjpagent.so=port=10001,listen=all
#8a7ceb753aa

jmap -dump:live,format=b,file=/tmp/heapdump.hprof 12345
jcmd <PID> GC.heap_dump /tmp/heapdump.hprof

awk '{
  cmd = "date"
  cmd | getline output
  close(cmd) # Important: Close the pipe
  print output
}' file.txt

awk '{ gsub(/^ +| +$/, "", $0); print }' file.txt

date -d "20250207 10:35:29,500" +%s.%3N  # Output: 1739001329.500
diff=$(echo "1739001330.700 - 1739001329.500" | awk '{print $1-$2}')
echo $diff  # Output: 1.2

diff_ms=$(echo "$diff * 1000" | bc)
echo $diff_ms  # Output: 1200


<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- Define the Map with String keys and Set<String> values -->
    <util:map id="stringSetMap">
        <!-- Entry for key "group1" -->
        <entry key="group1">
            <util:set>
                <value>Value1</value>
                <value>Value2</value>
                <value>Value3</value>
            </util:set>
        </entry>
        <!-- Entry for key "group2" -->
        <entry key="group2">
            <util:set>
                <value>ValueA</value>
                <value>ValueB</value>
            </util:set>
        </entry>
    </util:map>

</beans>

