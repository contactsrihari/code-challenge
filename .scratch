#!/bin/bash

awk -F '#' '
# Extract datetime, key, total, and count from the log line
{
    # Format datetime as YYYYMMDD HH:MM and split into date and time parts
    datetime = substr($1, 1, 10) " " substr($1, 12, 5);

    # Zero pad hour, minute, and second to ensure two digits
    split(datetime, dt_parts, " ");
    split(dt_parts[2], time_parts, ":");

    # Extract hour, minute, and second and pad them if necessary
    hour = time_parts[1];
    minute = time_parts[2];
    second = time_parts[3];

    # If hour, minute, or second has only one digit, prepend "0"
    hour = (length(hour) == 1) ? "0" hour : hour;
    minute = (length(minute) == 1) ? "0" minute : minute;
    second = (length(second) == 1) ? "0" second : second;

    # Rebuild the datetime with padded hour, minute, and second
    formatted_datetime = dt_parts[1] " " hour ":" minute ":" second;

    # Store the log information
    key = $2;
    total = $3;
    count = $4;

    # Initialize data structures for each unique formatted datetime
    if (!seen[formatted_datetime]) {
        seen[formatted_datetime] = 1;
        total_sum[formatted_datetime] = 0;
        count_sum[formatted_datetime] = 0;
        max_total[formatted_datetime] = total;
        max_count[formatted_datetime] = count;
        num_records[formatted_datetime] = 0;
    }

    # Accumulate total and count for averaging later
    total_sum[formatted_datetime] += total;
    count_sum[formatted_datetime] += count;
    num_records[formatted_datetime]++;

    # Update max values for total and count
    if (total > max_total[formatted_datetime]) {
        max_total[formatted_datetime] = total;
    }
    if (count > max_count[formatted_datetime]) {
        max_count[formatted_datetime] = count;
    }
}
END {
    # Print the header with column names
    printf "%-20s %-15s %-15s %-15s %-15s\n", "Datetime", "Avg Total", "Avg Count", "Max Total", "Max Count";

    # Print the results for each datetime, with the calculated averages and max values
    for (datetime in total_sum) {
        avg_total = total_sum[datetime] / num_records[datetime];
        avg_count = count_sum[datetime] / num_records[datetime];
        printf "%-20s %-15.2f %-15.2f %-15.2f %-15d\n", datetime, avg_total, avg_count, max_total[datetime], max_count[datetime];
    }
}
' input.log

