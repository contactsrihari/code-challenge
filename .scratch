import pandas as pd
import matplotlib.pyplot as plt
import io
import matplotlib.ticker as ticker

# ... (Sample data - same as before)

df = pd.read_csv(io.StringIO(log_data), sep='#', header=None, names=['datetime', 'chain_name', 'total_messages_added', 'pending_messages'])
df['datetime'] = pd.to_datetime(df['datetime'], format='%Y%m%d %H:%M:%S,%f')
df = df.set_index('datetime')

# Resample and aggregate SEPARATELY for each chain
dfs = []  # List to store resampled dataframes for each chain
for chain in df['chain_name'].unique():
    chain_df = df[df['chain_name'] == chain]
    chain_resampled = chain_df.resample('5min').agg({'pending_messages': 'mean', 'total_messages_added': 'max'})
    chain_resampled['record_count'] = chain_df.resample('5min').size()
    chain_resampled['chain_name'] = chain  # Add the chain name back as a column
    dfs.append(chain_resampled)

df_resampled = pd.concat(dfs)  # Concatenate the resampled dataframes

df_resampled['processed_messages'] = df_resampled['total_messages_added'].diff().fillna(0) - df_resampled['pending_messages'].diff().fillna(0)

# Plotting (Corrected)
num_chains = len(df_resampled['chain_name'].unique())
fig, axes = plt.subplots(num_chains, 1, figsize=(12, 6 * num_chains), sharex=True)

if num_chains == 1:
    axes = [axes]

for i, chain in enumerate(df_resampled['chain_name'].unique()):
    chain_data = df_resampled[df_resampled['chain_name'] == chain]
    ax = axes[i]

    ax.plot(chain_data.index, chain_data['record_count'], label='Record Count')
    ax.plot(chain_data.index, chain_data['processed_messages'], label='Processed Messages')
    ax.plot(chain_data.index, chain_data['pending_messages'], label='Avg Pending Messages')

    ax.set_title(chain)
    ax.set_ylabel('Count')
    ax.legend()
    ax.grid(True)
    ax.tick_params(axis='x', rotation=45)
    ax.xaxis.set_major_locator(plt.AutoLocator())

    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, p: format(int(x), ',')))

    if i < num_chains - 1:
        ax.set_xticklabels([])

plt.xlabel('Time')
plt.tight_layout()
plt.subplots_adjust(hspace=0.3)
plt.show()
